syntax = "proto3";

package uwproto;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "userwatch_public.proto";

option go_package = "github.com/userwatch/uw1/protos/uwprotoshepherd";
option java_multiple_files = true;
option java_package = "ai.upollo.proto";
option objc_class_prefix = "UpProto";


// Server to server APIs

// Shepherd is the service by which customer servers can talk with Userwatch
// in backend integrations. While we may wrap it in libraries, customers can
// interact with it directly too. The caller is authenticated via project
// private api keys.
service Shepherd {

  // Inform Userwatch of an event in your application.
  //
  // Include any UserInfo you have, or an empty UserInfo if you have none.
  rpc Track (TrackEventRequest) returns (AnalysisResponse);

  // Access the assessment of a user for whom an event was previously
  // registered with Userwatch via a track(UserInfo, EventType) call from
  // your client application.
  //
  // At this point you can also attach any additional UserInfo your server
  // has which your client might not have had available.
  rpc Verify (VerifyRequest) returns (AnalysisResponse);

  // Verifying Challenge Responses
  rpc CreateChallenge (CreateChallengeRequest)
      returns (CreateChallengeResponse);
  rpc VerifyChallenge (ChallengeVerificationRequest)
      returns (ChallengeVerificationResponse);

  // User Management
  rpc ApproveDevice (DeviceRequest) returns (DeviceResponse);
  rpc ReportDevice (DeviceRequest) returns (DeviceResponse);
  rpc GetDeviceList (DeviceListRequest) returns (DeviceListResponse);
}

message WebHookRequest {
  AnalysisResponse analysis = 1;
  string project_id = 2;
  repeated string urls = 3;
  string web_hook_key = 4;
}

message WebHookResponse {
  AnalysisResponse analysis = 1;
  google.protobuf.Timestamp timestamp = 2;
}


message DeviceRequest {
  string device_id = 1;

  // UserID of to block or approve this device for. Cannot be used with global
  string user_id = 2;

  // Block or approve this device globally. Cannot be used with user_id
  bool global = 3;
}

message DeviceResponse {
  bool success = 1;
}

message DeviceListRequest {
  string user_id = 1;
}

message DeviceListResponse {
  repeated DeviceInfo devices = 1;
}

message SignedToken {
  bytes payload = 1;
  bytes signature = 2;
  bytes nonce = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message VerifyRequest {
  string event_token = 1;
  UserInfo userinfo = 2;
  ChallengeVerificationRequest challenge_verification = 4;

  // The following information is redundant with the event_token
  EventType event_type = 5 [deprecated = true];
  string customer_defined_event_type = 6 [deprecated = true];
  string sub_event_type = 8 [deprecated = true];
}

message ChallengeVerificationRequest {
  string challenge_id = 1;
  string secret_response = 2;
  bytes webauthn_credential_response = 3;

  // Not required if sending with a validation request
  UserInfo userinfo = 6;
  // Not required if sending with a validation request
  string device_id = 7;
  // Not required if sending with a validation request
  //ReportRequest report = 4;

  ChallengeType type = 5;
  string report_token = 8;
}

message ChallengeVerificationResponse {
  google.protobuf.BoolValue challenge_completed_successfully = 1;
  EventType event_type = 3;
  string customer_defined_event_type = 4;
  string sub_event_type = 5;
}

message CreateChallengeRequest {
  ChallengeType type = 1;

  // Userinfo is used for phone numbers and email details
  UserInfo userinfo = 2;

  string device_id = 4;

  // Required for webauthn
  // Should be consistent eg. login.company.com or similar
  string origin = 5;

  EventType event_type = 6;
  string customer_defined_event_type = 7;
  string sub_event_type = 8;
}

// An error will be returned if creating the challenge fails (eg. phone
// number is out of service, email bounces)
message CreateChallengeResponse {
  string challenge_id = 1;
  google.protobuf.Timestamp expiry = 2;
  bytes webauthn_credentials = 3;
  ChallengeType type = 4;
}

message TrackEventRequest {
  UserInfo userinfo = 1;
  Event event = 2;
}
